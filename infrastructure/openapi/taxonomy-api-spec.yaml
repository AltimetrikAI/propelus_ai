openapi: 3.0.3
info:
  title: Propelus Taxonomy API
  description: |
    Healthcare profession taxonomy normalization and translation API

    **Updated**: January 21, 2025
    **Changes**:
    - customer_id changed from integer to string (format: subsystem-clientid)
    - Added description field to taxonomies
    - Auto-detect new vs updated taxonomies (no manual flag required)
    - Enhanced column structure definition for master vs customer taxonomies
  version: 1.1.0
  contact:
    name: Propelus AI Team
    email: support@propelus.ai

servers:
  - url: https://api.propelus.ai/v1
    description: Production
  - url: https://api-staging.propelus.ai/v1
    description: Staging
  - url: http://localhost:8000/v1
    description: Local development

tags:
  - name: Ingestion
    description: Data ingestion endpoints
  - name: Translation
    description: Taxonomy translation endpoints
  - name: Taxonomies
    description: Taxonomy management endpoints
  - name: Mappings
    description: Mapping management endpoints

paths:
  /ingest:
    post:
      tags:
        - Ingestion
      summary: Ingest taxonomy data (full reload)
      description: |
        Upload complete taxonomy data for processing. Supports both master and customer taxonomies.
        System auto-detects if taxonomy is new or updated based on existing records.

        **Master Taxonomy**: Requires hierarchical node structure with levels
        **Customer Taxonomy**: Requires profession column only, all other columns treated as attributes
      operationId: ingestData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionRequest'
      responses:
        '200':
          description: Ingestion initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /translate:
    post:
      tags:
        - Translation
      summary: Translate profession code
      description: Translate a profession code from one taxonomy to another
      operationId: translateCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslationRequest'
      responses:
        '200':
          description: Translation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /taxonomies:
    get:
      tags:
        - Taxonomies
      summary: List taxonomies
      description: Get list of available taxonomies
      operationId: listTaxonomies
      parameters:
        - name: customer_id
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum: [master, customer]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: List of taxonomies
          content:
            application/json:
              schema:
                type: object
                properties:
                  taxonomies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Taxonomy'

  /taxonomies/{taxonomy_id}:
    get:
      tags:
        - Taxonomies
      summary: Get taxonomy details
      operationId: getTaxonomy
      parameters:
        - name: taxonomy_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Taxonomy details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyDetail'
        '404':
          $ref: '#/components/responses/NotFound'

  /mappings:
    get:
      tags:
        - Mappings
      summary: Query mappings
      description: Get mappings between taxonomies
      operationId: getMappings
      parameters:
        - name: customer_id
          in: query
          schema:
            type: string
        - name: taxonomy_id
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [active, pending_review, inactive]
        - name: min_confidence
          in: query
          schema:
            type: number
            format: float
            minimum: 0
            maximum: 1
      responses:
        '200':
          description: List of mappings
          content:
            application/json:
              schema:
                type: object
                properties:
                  mappings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Mapping'

  /verify:
    post:
      tags:
        - Mappings
      summary: Human verification
      description: Submit human verification for low-confidence mappings
      operationId: verifyMapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationRequest'
      responses:
        '200':
          description: Verification accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  mapping_id:
                    type: integer

components:
  schemas:
    IngestionRequest:
      type: object
      required:
        - customer_id
        - taxonomy_type
        - file_name
      properties:
        customer_id:
          type: string
          description: |
            Customer identifier in format: subsystem-clientid
            Examples: "evercheck-719", "datasolutions-123", "cebroker-456"
          pattern: '^[a-z0-9]+-[a-z0-9]+$'
          example: "evercheck-719"
        taxonomy_id:
          type: integer
          description: |
            Taxonomy identifier (optional for new taxonomies, auto-generated if not provided)
          example: 456
        taxonomy_name:
          type: string
          description: Human-friendly taxonomy name (optional)
          example: "ABC Hospital Professions 2025"
        description:
          type: string
          description: Detailed description of taxonomy (optional)
          example: "Updated profession codes for ABC Hospital system"
        taxonomy_type:
          type: string
          enum: [master, customer]
          description: Type of taxonomy being ingested
        file_name:
          type: string
          description: |
            S3 file path or file URL
            Format: s3://bucket/key or https://...
          example: "s3://propelus-taxononomy-s3/Customer-999-999.xlsx"
        columns:
          $ref: '#/components/schemas/TaxonomyColumns'

    TaxonomyColumns:
      type: object
      description: |
        Column structure definition varies by taxonomy type:
        - Master taxonomy: requires nodes, attributes, and profession
        - Customer taxonomy: requires only profession (all others become attributes)
      properties:
        nodes:
          type: array
          description: Node columns with hierarchy levels (master taxonomy only)
          items:
            type: object
            properties:
              column_name:
                type: string
                example: "Industry"
              level:
                type: integer
                example: 0
          example:
            - column_name: "Industry"
              level: 0
            - column_name: "Major Group"
              level: 1
            - column_name: "Minor Group"
              level: 2
        attributes:
          type: array
          description: |
            Attribute column names
            For customer taxonomy: auto-detected (all columns except profession)
          items:
            type: string
          example: ["Taxonomy Code", "Description", "State"]
        profession:
          type: string
          description: Column name containing profession/occupation name
          example: "Profession Name"

    IngestionResponse:
      type: object
      properties:
        load_id:
          type: integer
          description: Unique identifier for this ingestion load
        customer_id:
          type: string
          description: Customer identifier
        taxonomy_id:
          type: integer
          description: Taxonomy identifier (auto-generated for new taxonomies)
        status:
          type: string
          enum: [in progress, completed, failed]
          description: Current status of ingestion
        load_type:
          type: string
          enum: [new, updated]
          description: Auto-detected type (new taxonomy or update to existing)
        message:
          type: string
        records_count:
          type: integer
          description: Number of rows/records processed

    TranslationRequest:
      type: object
      required:
        - source_taxonomy
        - target_taxonomy
        - source_code
      properties:
        source_taxonomy:
          type: string
          description: Source taxonomy identifier
        target_taxonomy:
          type: string
          description: Target taxonomy identifier
        source_code:
          type: string
          description: Code to translate
        attributes:
          type: object
          description: Additional attributes (state, license type, etc.)

    TranslationResponse:
      type: object
      properties:
        source:
          type: object
          properties:
            taxonomy:
              type: string
            code:
              type: string
            attributes:
              type: object
        target:
          type: object
          properties:
            taxonomy:
              type: string
            codes:
              type: array
              items:
                type: string
            nodes:
              type: array
              items:
                type: object
                properties:
                  nodeId:
                    type: integer
                  value:
                    type: string
                  level:
                    type: integer
                  confidence:
                    type: number
        mappingMethod:
          type: string
          enum: [existing, ai_translation, not_found]
        confidence:
          type: number
          format: float
        ambiguous:
          type: boolean
        cached:
          type: boolean

    Taxonomy:
      type: object
      properties:
        taxonomy_id:
          type: integer
        customer_id:
          type: string
          description: Customer identifier in format subsystem-clientid
        name:
          type: string
        description:
          type: string
          description: Human-friendly description (optional)
        type:
          type: string
          enum: [master, customer]
        status:
          type: string
        created_at:
          type: string
          format: date-time
        taxonomy_version:
          type: integer

    TaxonomyDetail:
      allOf:
        - $ref: '#/components/schemas/Taxonomy'
        - type: object
          properties:
            nodes_count:
              type: integer
            levels:
              type: integer

    Mapping:
      type: object
      properties:
        mapping_id:
          type: integer
        master_node_id:
          type: integer
        child_node_id:
          type: integer
        confidence:
          type: number
          format: float
        status:
          type: string
        created_at:
          type: string
          format: date-time

    VerificationRequest:
      type: object
      required:
        - mapping_id
        - approved
        - user
      properties:
        mapping_id:
          type: integer
        approved:
          type: boolean
        user:
          type: string
        notes:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

security:
  - ApiKeyAuth: []
